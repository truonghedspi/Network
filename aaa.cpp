int get_max_log(ChatRequest chatRequest);
int get_log(ChatRequest chatRequest,char *buff,int i);
//void readBlockList(char blockList[100][50], int  * numUserBlock, char * _userName);
//void writeBlockList(char blockList[100][50], int numUserBlock, char* fileName);
int checkUserExisted(char list[100][50], int numUserBlock, char* userName);
//void handeleBlockUserRequest(BlockUserRequest request);
//void handleUnblockUserRequest(BlockUserRequest request);
void notifyChangeStatusAll(char* userName, UserStatus status);
void setOnline(User* user);
void setOffline(User* user);
void handleClientDisconnect(int sockFD);
int sendRegisterRespond(RegisterResult registerResult, char* messenger);
void handleRegisterRequest(RegisterRequest registerRequest);
int sendLoginRespond(LoginResult loginResult, char* messenger);
void handleLoginRequest(LoginRequest loginRequest);
void handleLogoutRequest();
void handleChatLogRequest(ChatRequest chatRequest);
void handleChatWithFriendRequest(ChatRequest chatRequest);
void sendGetOnlineUserListRespond();
void handleGetListOnlineUserRequest();
int findRoomIndex(char* roomName, Room* rooms, int numRooms);
void initRoom(Room* rooms, int numRooms);
void handleGetRoomListRequest();
int getIndexUserInRoom(Room room, char* userName);
void removeUserInRoom(Room *room, int index);
void sendRoomAll(char* userName, char * messenger, Room room, RoomResult roomResult);
void handleRoomJoin(RoomRequest request);
void handleChatRoomRequest(RoomRequest request);
void handleRoomOut(char * roomName);
void handleRoomRequest(RoomRequest request);
void recognizeRequest(char* buff);
Block readBlockList(char * userBlocker);
void writeBlockList(Block blockList,char * userBlocker);
int check_block(char userBlocker[],char userBlocked[]);
void handleBlockUserRequest(BlockUserRequest request);
void handleUnBlockUserRequest(BlockUserRequest request);
void sendGetBlockListRespond();
void handleGetBlockListRespond();